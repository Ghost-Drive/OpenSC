{
  "address": "0x77359601A8F7B100Edb82c9f61Fe35738B318Db7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenDomain_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeCollector_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actionCounter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "listHelper_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "slug",
          "type": "string"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionCounter",
      "outputs": [
        {
          "internalType": "contract IFileActionCounter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "slug",
              "type": "string"
            },
            {
              "internalType": "uint96",
              "name": "royalties",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "tokenMaxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "callCost",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "interactionId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "internalType": "struct IFileAccessCollectionUpgradeable.SAddTokenCall",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "executedMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "fileToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interactionId",
          "type": "bytes32"
        }
      ],
      "name": "isExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "to",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "callCost",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "interactionId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "internalType": "struct IFileAccessCollectionUpgradeable.SMintMultipleCall",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintMultiple",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenMaxSupply",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "interactionId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "internalType": "struct IFileAccessCollectionUpgradeable.SMaxSupplyCall",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyPercentage",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyaltyPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenToFile",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "slug",
              "type": "string"
            },
            {
              "internalType": "uint96",
              "name": "royalties",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "tokenMaxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "callCost",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "interactionId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "internalType": "struct IFileAccessCollectionUpgradeable.SAddTokenCall",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyAddToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenMaxSupply",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "interactionId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "internalType": "struct IFileAccessCollectionUpgradeable.SMaxSupplyCall",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyMaxSupply",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "to",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "callCost",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "interactionId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "internalType": "struct IFileAccessCollectionUpgradeable.SMintMultipleCall",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x12dc9631b6a42d1fbdd317dfbe5785f538394fc6e348e39bc78d8896c6d0f679",
  "receipt": {
    "to": null,
    "from": "0x6490C409b50B0dac59619E06B5a4bD14c3E968C3",
    "contractAddress": "0x77359601A8F7B100Edb82c9f61Fe35738B318Db7",
    "transactionIndex": 0,
    "gasUsed": "3418138",
    "logsBloom": "0x
    "blockHash": "0x66169cc54e0b318064a4863392575e72e69464467a5d7ae67e73f3a79458368f",
    "transactionHash": "0x12dc9631b6a42d1fbdd317dfbe5785f538394fc6e348e39bc78d8896c6d0f679",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33504722,
        "transactionHash": "0x12dc9631b6a42d1fbdd317dfbe5785f538394fc6e348e39bc78d8896c6d0f679",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006490c409b50b0dac59619e06b5a4bd14c3e968c3",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000030931d11df8e6000000000000000000000000000000000000000000000000002728d8a2bc1e000000000000000000000000000000000000000000000000472948851f1e875a90d0000000000000000000000000000000000000000000000000241fa6d19e251a000000000000000000000000000000000000000000000047294b8e50efa55376d",
        "logIndex": 0,
        "blockHash": "0x66169cc54e0b318064a4863392575e72e69464467a5d7ae67e73f3a79458368f"
      }
    ],
    "blockNumber": 33504722,
    "cumulativeGasUsed": "3418138",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "filenft-testnet.gxdtoken.io",
    "0x990ff3C0767ffA9192C88B2Cdc7fB50E5209EEf4",
    "0xc901001DcFf76992734C5d35629fD06eA94c7aA5",
    "0xf74fE2c87f9CcC03b2945B6EE4d4EEA974ac320f",
    "0x7f20EC5430a045Fb16b9C8831a4F6395b31cdCe2",
    "0x0b1E18a21fea118EABC2CaD3a162dB10d887bc52"
  ],
  "numDeployments": 5,
  "solcInputHash": "5127a09946c74f44f2c43d4e6ff615a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenDomain_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actionCounter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listHelper_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"MaxSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionCounter\",\"outputs\":[{\"internalType\":\"contract IFileActionCounter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"royalties\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tokenMaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"internalType\":\"struct IFileAccessCollectionUpgradeable.SAddTokenCall\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"fileToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interactionId\",\"type\":\"bytes32\"}],\"name\":\"isExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"internalType\":\"struct IFileAccessCollectionUpgradeable.SMintMultipleCall\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenMaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"internalType\":\"struct IFileAccessCollectionUpgradeable.SMaxSupplyCall\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyPercentage\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyaltyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToFile\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"royalties\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"tokenMaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"internalType\":\"struct IFileAccessCollectionUpgradeable.SAddTokenCall\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyAddToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenMaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"internalType\":\"struct IFileAccessCollectionUpgradeable.SMaxSupplyCall\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyMaxSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"internalType\":\"struct IFileAccessCollectionUpgradeable.SMintMultipleCall\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol\":\"FileAccessCollectionUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ghostdrive/signer/sol/contracts/SignatureAuth.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nabstract contract SignatureAuth\\n{\\n    function isExecuted(bytes32 interactionId) public view virtual returns (bool);\\n    function signWallet() public view virtual returns(address);\\n}\",\"keccak256\":\"0xe48053ad6f515c1a767e5620e489577d67dfb58ebfa758e8836d5ed22f0c8643\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x1ad46ec868f3cbf4331949daad82a6b2d846f2f3944cf0d53805f2296c30593b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/PaidActions.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity 0.8.9;\\n\\nabstract contract PaidActions {\\n\\n    function getFeeCollector() public virtual view returns(address);\\n\\n    function _payFee(uint256 amount) internal {\\n        _withdraw(getFeeCollector(), amount);\\n    }\\n\\n    function _withdraw(address to, uint256 amount) private {\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"PaidActions: fee transfer failed\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x63123f3150b8d95f784fb1d8c953e63e6017a1051aa7ab0fcbb90e99bf65945f\",\"license\":\"Unlicensed\"},\"contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@ghostdrive/signer/sol/contracts/SignatureAuth.sol\\\";\\n\\nimport { az09Dash } from \\\"../libs/az09Dash.sol\\\";\\nimport { ToString } from \\\"../libs/ToString.sol\\\";\\nimport \\\"../PaidActions.sol\\\";\\nimport \\\"./interfaces/IFileActionCounter.sol\\\";\\nimport \\\"./interfaces/IFileAccessCollectionUpgradeable.sol\\\";\\n\\n\\n\\ncontract FileAccessCollectionUpgradeable is IFileAccessCollectionUpgradeable,\\n    ERC2981Upgradeable, ERC1155Upgradeable, ERC1155SupplyUpgradeable,\\n    SignatureAuth, PaidActions, EIP712Upgradeable\\n{\\n    bytes32 constant SMintMultipleCallTypeHash = keccak256(\\\"SMintMultipleCall(uint256 id,address[] to,uint256[] amounts,uint256 callCost,bytes32 interactionId,address from)\\\");\\n    bytes32 constant SAddTokenCallTypeHash = keccak256(\\\"SAddTokenCall(string slug,uint96 royalties,uint256 tokenMaxSupply,uint256 callCost,bytes32 interactionId,address from)\\\");\\n    bytes32 constant SMaxSupplyCallTypeHash = keccak256(\\\"CMaxSupplyStruct(uint256 tokenId,uint256 tokenMaxSupply,bytes32 interactionId,address from)\\\");\\n\\n    using ToString for bytes32;\\n    using ToString for address;\\n\\n    using az09Dash for string;\\n    using ECDSAUpgradeable for bytes32;\\n\\n    string public name;\\n    string public description;\\n    uint256 public latestTokenId;\\n\\n    mapping(uint256 => string) public tokenToFile;\\n    mapping(string => uint256) public fileToToken;\\n    mapping(uint256 => uint256) private _maxSupply;\\n\\n    address public royaltyReceiver;\\n    // signature stuff\\n    mapping (bytes32 => bool) public executedMap;\\n    address private immutable _signer;\\n\\n    bytes32 immutable private _tokenDomain;\\n    address immutable private _feeCollector;\\n    IFileActionCounter public immutable actionCounter;\\n    address immutable _minter;\\n    address immutable _listHelper;\\n\\n    string constant public VERSION = \\\"0.0.2\\\";\\n\\n    event MaxSupply(uint256 tokenId, uint256 oldMaxSupply, uint256 newMaxSupply);\\n\\n    event AddToken(uint256 tokenId, string slug);\\n\\n    constructor(\\n        string memory tokenDomain_,\\n        address signer_,\\n        address feeCollector_,\\n        address actionCounter_,\\n        address minter_,\\n        address listHelper_\\n    ) {\\n        _tokenDomain = bytes32(bytes(tokenDomain_));\\n        _signer = signer_;\\n        _feeCollector = feeCollector_;\\n        _minter = minter_;\\n        _listHelper = listHelper_;\\n        actionCounter = IFileActionCounter(actionCounter_);\\n    }\\n\\n    function maxSupply(uint256 id) public view virtual returns (uint256) {\\n        return _maxSupply[id];\\n    }\\n\\n    function getFeeCollector() public view override returns(address) {\\n        return _feeCollector;\\n    }\\n\\n    // signature stuff\\n    function signWallet() public view override returns(address) {\\n        return _signer;\\n    }\\n\\n    function isExecuted(bytes32 interactionId) public view override returns (bool) {\\n        return executedMap[interactionId];\\n    }\\n\\n    function initialize(\\n        address creator, string memory name_, string memory description_\\n    ) public initializer {\\n        name = name_;\\n        description = description_;\\n        royaltyReceiver = creator;\\n        __ERC1155_init('');\\n        __ERC2981_init();\\n        __EIP712_init(\\\"FileAccessCollectionUpgradeable\\\", VERSION);\\n    }\\n\\n    function uri(uint256) public view override(IFileAccessCollectionUpgradeable, ERC1155Upgradeable) returns (string memory) {\\n        return string(abi.encodePacked(\\n            'https://', _tokenDomain.toString(), '/', address(this).toString(), '/{id}.json'\\n        ));\\n    }\\n\\n    function mintMultiple(\\n        SMintMultipleCall calldata req,\\n        bytes memory signature\\n    ) external payable {\\n        require (isExecuted(req.interactionId) == false, \\\"Already executed\\\");\\n        require(req.callCost <= msg.value, \\\"FileAccessCollectionUpgradeable: Underpriced\\\");\\n        require(verifyMint(req, signature), \\\"INVALID_SIGNATURE\\\");\\n        require(req.from == _msgSender(), \\\"FileAccessCollectionUpgradeable: Wrong sender\\\");\\n        executedMap[req.interactionId] = true;\\n\\n        actionCounter.addTokensMinted(\\n            _msgSender(),\\n            _mintMultiple(\\n                req.to,\\n                req.id,\\n                req.amounts\\n            )\\n        );\\n\\n        if(req.callCost > 0) {\\n            _payFee(msg.value);\\n        }\\n\\n    }\\n\\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) external {\\n        require(_msgSender() == _minter, \\\"Not allowed\\\");\\n        _mint(to, id, amount, data);\\n    }\\n\\n    function _mintMultiple(\\n        address[] memory to,\\n        uint256 id,\\n        uint256[] memory amounts\\n    ) private returns(uint256) {\\n        require(exists(id), 'Token does not exist');\\n        require(to.length == amounts.length, 'Different array length');\\n\\n        if (maxSupply(id) > 0) {\\n            uint256 totalToMint = 0;\\n            for (uint256 i = 0; i < amounts.length; ++i) {\\n                totalToMint += amounts[i];\\n            }\\n\\n            if ( (totalSupply(id) + totalToMint) > maxSupply(id)) {\\n                revert(\\\"Can't mint more tokens. Max supply exceed.\\\");\\n            }\\n        }\\n\\n        uint256 mintedCount = 0;\\n        for(uint256 i; i<to.length; i++){\\n            _mint(to[i], id, amounts[i], \\\"\\\");\\n            mintedCount += amounts[i];\\n        }\\n\\n        return mintedCount;\\n    }\\n\\n    function exists(uint256 id) public view override(ERC1155SupplyUpgradeable) returns (bool) {\\n        return bytes(tokenToFile[id]).length > 0;\\n    }\\n\\n    function verifyMaxSupply(SMaxSupplyCall calldata req, bytes memory signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(SMaxSupplyCallTypeHash, req.tokenId, req.tokenMaxSupply, req.interactionId, req.from))\\n        ).recover(signature);\\n\\n        return signer == signWallet();\\n    }\\n\\n    function verifyMint(SMintMultipleCall calldata req, bytes memory signature) public view returns(bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(\\n                SMintMultipleCallTypeHash, req.id, keccak256(abi.encodePacked(req.to)),\\n                keccak256(abi.encodePacked(req.amounts)), req.callCost, req.interactionId, req.from\\n            ))\\n        ).recover(signature);\\n\\n        return signer == signWallet();\\n    }\\n\\n    function verifyAddToken(SAddTokenCall calldata req, bytes memory signature) public view returns(bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(\\n                SAddTokenCallTypeHash, keccak256(bytes(req.slug)), req.royalties,\\n                req.tokenMaxSupply,\\n                req.callCost, req.interactionId, req.from\\n            ))\\n        ).recover(signature);\\n\\n        return signer == signWallet();\\n    }\\n\\n    function addToken(\\n        SAddTokenCall calldata req,\\n        bytes memory signature\\n    ) external payable {\\n        require (req.callCost <= msg.value, \\\"FileAccessCollectionUpgradeable: Underpriced\\\");\\n        require (isExecuted(req.interactionId) == false, \\\"FileAccessCollectionUpgradeable: Already executed\\\");\\n        require (req.from == _msgSender(), \\\"FileAccessCollectionUpgradeable: INVALID_SENDER\\\");\\n        require (req.slug.isAz09Dash(), \\\"FileAccessCollectionUpgradeable: Slug format mismatch\\\");\\n        require (verifyAddToken(req, signature), \\\"FileAccessCollectionUpgradeable: INVALID_SIGNATURE\\\");\\n\\n        executedMap[req.interactionId] = true;\\n\\n        _addToken(req.slug, req.royalties, req.tokenMaxSupply);\\n\\n        if(req.callCost > 0) {\\n            _payFee(msg.value);\\n        }\\n\\n        actionCounter.addTokensCreated(_msgSender(), 1);\\n    }\\n\\n\\n    function setTokenRoyaltyPercentage(uint256 tokenId, uint96 _royaltyPercentage) external {\\n        require(\\n            _msgSender() == _listHelper,\\n            \\\"Not allowed\\\"\\n        );\\n        require(_royaltyPercentage < 10000, \\\"Invalid percentage\\\");\\n\\n        _setTokenRoyalty(tokenId, royaltyReceiver, _royaltyPercentage);\\n    }\\n\\n    function _addToken(string memory fileId, uint96 royalties, uint256 tokenMaxSupply) private {\\n        require(bytes(fileId).length > 0, 'Empty file id');\\n        require(fileToToken[fileId] == 0, 'Token already exist');\\n        latestTokenId = latestTokenId + 1;\\n        uint256 currentTokenId = latestTokenId;\\n\\n        tokenToFile[currentTokenId] = fileId;\\n        fileToToken[fileId] = currentTokenId;\\n        _setMaxSupply(currentTokenId, tokenMaxSupply);\\n\\n        if (royaltyReceiver != address(0)) {\\n            _setTokenRoyalty(currentTokenId, royaltyReceiver, royalties);\\n        }\\n        emit TransferSingle(\\n            _msgSender(),\\n            address(0),\\n            address(0),\\n            currentTokenId,\\n            0\\n        );\\n        emit AddToken(currentTokenId, fileId);\\n        emit URI(uri(currentTokenId), currentTokenId);\\n    }\\n\\n    function setMaxSupply(\\n        SMaxSupplyCall calldata req,\\n        bytes memory signature\\n    ) public {\\n        require (isExecuted(req.interactionId) == false, \\\"Already executed\\\");\\n        require (verifyMaxSupply(req, signature), \\\"INVALID_SIGNATURE\\\");\\n        require(req.from == _msgSender(), \\\"FileAccessCollectionUpgradeable: Wrong sender\\\");\\n\\n        executedMap[req.interactionId] = true;\\n        _setMaxSupply(req.tokenId, req.tokenMaxSupply);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Upgradeable, ERC2981Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setMaxSupply(uint256 tokenId, uint256 tokenMaxSupply) private {\\n        emit MaxSupply(tokenId, _maxSupply[tokenId], tokenMaxSupply);\\n        _maxSupply[tokenId] = tokenMaxSupply;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\n        ERC1155SupplyUpgradeable._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\",\"keccak256\":\"0xffbc3278d41f1b67b0f72a5eba2418194f643de4268cef78d8030e95b277db1b\",\"license\":\"Unlicensed\"},\"contracts/TokenizedFiles/interfaces/IFileAccessCollectionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IFileAccessCollectionUpgradeable is IERC1155Upgradeable {\\n\\n    struct SMintMultipleCall {\\n        uint256 id;\\n        address[] to;\\n        uint256[] amounts;\\n        uint256 callCost;\\n        bytes32 interactionId;\\n        address from;\\n    }\\n\\n    struct SAddTokenCall {\\n        string slug;\\n        uint96 royalties;\\n        uint256 tokenMaxSupply;\\n        uint256 callCost;\\n        bytes32 interactionId;\\n        address from;\\n    }\\n\\n    struct SMaxSupplyCall {\\n        uint256 tokenId;\\n        uint256 tokenMaxSupply;\\n        bytes32 interactionId;\\n        address from;\\n    }\\n\\n    function maxSupply(uint256 id) external view returns (uint256);\\n    function initialize(address creator, string memory name_, string memory description_) external;\\n    function uri(uint256) external view returns (string memory);\\n    function mintMultiple(SMintMultipleCall calldata req, bytes memory signature) external payable;\\n    function setTokenRoyaltyPercentage(uint256 tokenId, uint96 _royaltyPercentage) external;\\n}\",\"keccak256\":\"0x83b23eacaaf758bac1bc1bb89ef9511d166a438d5b38179d22aebc77448e1f65\",\"license\":\"Unlicensed\"},\"contracts/TokenizedFiles/interfaces/IFileActionCounter.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity 0.8.9;\\n\\ninterface IFileActionCounter\\n{\\n    function addTokensMinted(address user, uint256 minted) external;\\n\\n    function addTokensCreated(address user, uint256 created) external;\\n}\",\"keccak256\":\"0xd4a0ce69cff19196e730e88d43d10a44acb062eb8a087eed7c744481522be034\",\"license\":\"Unlicensed\"},\"contracts/libs/ToString.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity 0.8.9;\\n\\nlibrary ToString {\\n\\n    function toString(address account) public pure returns(string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function toString(bytes memory data) public pure returns(string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint i = 0; i < data.length; i++) {\\n            str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\\n            str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    function toString(bytes32 source) public pure returns (string memory result)\\n    {\\n        uint8 length = 0;\\n        while (source[length] != 0 && length < 32) {\\n            length++;\\n        }\\n        assembly {\\n            result := mload(0x40)\\n        // new \\\"memory end\\\" including padding (the string isn't larger than 32 bytes)\\n            mstore(0x40, add(result, 0x40))\\n        // store length in memory\\n            mstore(result, length)\\n        // write actual data\\n            mstore(add(result, 0x20), source)\\n        }\\n    }\\n}\",\"keccak256\":\"0x46db40ab848876f091aa45a4f9376f75f6771fe98677cb18e15f284723ff48b0\",\"license\":\"Unlicensed\"},\"contracts/libs/az09Dash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary az09Dash {\\n  struct State {\\n    bool accepts;\\n    function (bytes1) pure internal returns (State memory) func;\\n  }\\n\\n  string public constant regex = \\\"[a-zA-Z0-9\\\\\\\\-]+\\\";\\n\\n  function s0(bytes1 c) pure internal returns (State memory) {\\n    c = c;\\n    return State(false, s0);\\n  }\\n\\n  function s1(bytes1 c) pure internal returns (State memory) {\\n\\n     uint8 _cint = uint8(c);\\n\\n        if (_cint == 45 || _cint >= 48 && _cint <= 57 || _cint >= 65 && _cint <= 90 || _cint >= 97 && _cint <= 122) {\\n          return State(true, s2);\\n        }\\n\\n    return State(false, s0);\\n  }\\n\\n  function s2(bytes1 c) pure internal returns (State memory) {\\n\\n     uint8 _cint = uint8(c);\\n\\n        if (_cint == 45 || _cint >= 48 && _cint <= 57 || _cint >= 65 && _cint <= 90 || _cint >= 97 && _cint <= 122) {\\n          return State(true, s3);\\n        }\\n\\n    return State(false, s0);\\n  }\\n\\n  function s3(bytes1 c) pure internal returns (State memory) {\\n\\n     uint8 _cint = uint8(c);\\n\\n        if (_cint == 45 || _cint >= 48 && _cint <= 57 || _cint >= 65 && _cint <= 90 || _cint >= 97 && _cint <= 122) {\\n          return State(true, s3);\\n        }\\n\\n    return State(false, s0);\\n  }\\n\\n  function isAz09Dash(string memory input) public pure returns (bool) {\\n    State memory cur = State(false, s1);\\n\\n    for (uint i = 0; i < bytes(input).length; i++) {\\n      bytes1 c = bytes(input)[i];\\n\\n      cur = cur.func(c);\\n    }\\n\\n    return cur.accepts;\\n  }\\n}\\n\",\"keccak256\":\"0x666a2699b58b35cad024e0368805de289665f74ebe767f7041d60cb61974f466\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162003f2438038062003f248339810160408190526200003591620000a2565b6200004086620001dc565b60a0526001600160a01b0394851660805292841660c052831661010052908216610120521660e0525062000204565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200009d57600080fd5b919050565b60008060008060008060c08789031215620000bc57600080fd5b86516001600160401b0380821115620000d457600080fd5b818901915089601f830112620000e957600080fd5b815181811115620000fe57620000fe6200006f565b604051601f8201601f19908116603f011681019083821181831017156200012957620001296200006f565b81604052828152602093508c848487010111156200014657600080fd5b600091505b828210156200016a57848201840151818301850152908301906200014b565b828211156200017c5760008484830101525b99506200018e91505089820162000085565b96505050620001a06040880162000085565b9350620001b06060880162000085565b9250620001c06080880162000085565b9150620001d060a0880162000085565b90509295509295509295565b80516020808301519190811015620001fe576000198160200360031b1b821691505b50919050565b60805160a05160c05160e0516101005161012051613cb4620002706000396000610bf101526000610cd10152600081816106c3015281816112fe01526114c80152600081816102a601526121210152600061085d01526000818161034e0152610fc10152613cb46000f3fe6080604052600436106101ed5760003560e01c8063906571471161010d578063e09314ad116100a0578063f242432a1161006f578063f242432a14610640578063f9aebda014610660578063fa996fae14610691578063fdbd98b0146106b1578063ffa1ad74146106e557600080fd5b8063e09314ad14610586578063e52cb36a146105a6578063e985e9c5146105d7578063ef0eb3871461062057600080fd5b8063b452da84116100dc578063b452da8414610513578063bd85b03914610526578063c83e13b814610553578063cb519d8c1461057357600080fd5b806390657147146104925780639fbc8713146104b2578063a22cb465146104d3578063ae82236c146104f357600080fd5b80634e1273f411610185578063731133e911610154578063731133e9146103f45780637a6cd9cb14610414578063869f75941461044d5780638c0e83491461047b57600080fd5b80634e1273f4146103725780634f558e791461039f5780635bddceab146103bf5780637284e416146103df57600080fd5b806312fde4b7116101c157806312fde4b7146102975780632a55205a146102de5780632eb2c2d61461031d5780634ce748591461033f57600080fd5b8062fdd58e146101f257806301ffc9a71461022557806306fdde03146102555780630e89341c14610277575b600080fd5b3480156101fe57600080fd5b5061021261020d366004612e85565b610716565b6040519081526020015b60405180910390f35b34801561023157600080fd5b50610245610240366004612ec5565b6107ae565b604051901515815260200161021c565b34801561026157600080fd5b5061026a6107bf565b60405161021c9190612f41565b34801561028357600080fd5b5061026a610292366004612f54565b61084e565b3480156102a357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161021c565b3480156102ea57600080fd5b506102fe6102f9366004612f6d565b6109a4565b604080516001600160a01b03909316835260208301919091520161021c565b34801561032957600080fd5b5061033d6103383660046130e8565b610a52565b005b34801561034b57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102c6565b34801561037e57600080fd5b5061039261038d366004613191565b610a9e565b60405161021c9190613296565b3480156103ab57600080fd5b506102456103ba366004612f54565b610bc7565b3480156103cb57600080fd5b5061033d6103da3660046132c0565b610bee565b3480156103eb57600080fd5b5061026a610cc0565b34801561040057600080fd5b5061033d61040f3660046132ec565b610cce565b34801561042057600080fd5b5061021261042f36600461334c565b80516020818301810180516101338252928201919093012091525481565b34801561045957600080fd5b50610212610468366004612f54565b6000908152610134602052604090205490565b34801561048757600080fd5b506102126101315481565b34801561049e57600080fd5b5061033d6104ad366004613388565b610d46565b3480156104be57600080fd5b50610135546102c6906001600160a01b031681565b3480156104df57600080fd5b5061033d6104ee366004613409565b610f13565b3480156104ff57600080fd5b5061024561050e366004613440565b610f1e565b61033d6105213660046134a3565b610fed565b34801561053257600080fd5b50610212610541366004612f54565b600090815260c9602052604090205490565b34801561055f57600080fd5b5061026a61056e366004612f54565b611388565b61033d6105813660046134a3565b6113a2565b34801561059257600080fd5b506102456105a13660046134a3565b6115ee565b3480156105b257600080fd5b506102456105c1366004612f54565b6000908152610136602052604090205460ff1690565b3480156105e357600080fd5b506102456105f23660046134fc565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205460ff1690565b34801561062c57600080fd5b5061024561063b3660046134a3565b6116e5565b34801561064c57600080fd5b5061033d61065b366004613526565b6117ad565b34801561066c57600080fd5b5061024561067b366004612f54565b6101366020526000908152604090205460ff1681565b34801561069d57600080fd5b5061033d6106ac366004613440565b6117f2565b3480156106bd57600080fd5b506102c67f000000000000000000000000000000000000000000000000000000000000000081565b3480156106f157600080fd5b5061026a60405180604001604052806005815260200164181718171960d91b81525081565b60006001600160a01b0383166107865760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526097602090815260408083206001600160a01b03949094168352929052205490565b60006107b9826118f9565b92915050565b61012f80546107cd9061358a565b80601f01602080910402602001604051908101604052809291908181526020018280546107f99061358a565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505081565b604051631623433d60e31b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260609073938945Cc5e4aE22F483931a17A55c1F56a26948f9063b11a19e89060240160006040518083038186803b1580156108bb57600080fd5b505af41580156108cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108f791908101906135bf565b604051632b65311f60e11b815230600482015273938945Cc5e4aE22F483931a17A55c1F56a26948f906356ca623e9060240160006040518083038186803b15801561094157600080fd5b505af4158015610955573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097d91908101906135bf565b60405160200161098e929190613640565b6040516020818303038152906040529050919050565b60008281526066602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610a195750604080518082019091526065546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610a38906001600160601b0316876136bd565b610a4291906136dc565b91519350909150505b9250929050565b6001600160a01b038516331480610a6e5750610a6e85336105f2565b610a8a5760405162461bcd60e51b815260040161077d906136fe565b610a978585858585611939565b5050505050565b60608151835114610b035760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161077d565b600083516001600160401b03811115610b1e57610b1e612f8f565b604051908082528060200260200182016040528015610b47578160200160208202803683370190505b50905060005b8451811015610bbf57610b92858281518110610b6b57610b6b61374d565b6020026020010151858381518110610b8557610b8561374d565b6020026020010151610716565b828281518110610ba457610ba461374d565b6020908102919091010152610bb881613763565b9050610b4d565b509392505050565b6000818152610132602052604081208054829190610be49061358a565b9050119050919050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c545760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015260640161077d565b612710816001600160601b031610610ca35760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642070657263656e7461676560701b604482015260640161077d565b61013554610cbc9083906001600160a01b031683611b1f565b5050565b61013080546107cd9061358a565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d345760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015260640161077d565b610d4084848484611c2d565b50505050565b600054610100900460ff1615808015610d665750600054600160ff909116105b80610d805750303b158015610d80575060005460ff166001145b610de35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161077d565b6000805460ff191660011790558015610e06576000805461ff0019166101001790555b8251610e1a9061012f906020860190612dd0565b508151610e2f90610130906020850190612dd0565b5061013580546001600160a01b0319166001600160a01b038616179055604080516020810190915260008152610e6490611d52565b610e6c611d85565b610ec86040518060400160405280601f81526020017f46696c65416363657373436f6c6c656374696f6e5570677261646561626c650081525060405180604001604052806005815260200164181718171960d91b815250611dae565b8015610d40576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b610cbc338383611ddf565b600080610fb783610fb17f5f21b314e803189587a545fde5241e6c72dc57e54abeff586b4d60457cc439728735602089013560408a0135610f6560808c0160608d0161377e565b604080516020810196909652850193909352606084019190915260808301526001600160a01b031660a082015260c0015b60405160208183030381529060405280519060200120611ec0565b90611f0e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911614949350505050565b34826060013511156110115760405162461bcd60e51b815260040161077d90613799565b60808201356000908152610136602052604090205460ff161561107e5760405162461bcd60e51b81526020600482015260316024820152600080516020613c5f83398151915260448201527008105b1c9958591e48195e1958dd5d1959607a1b606482015260840161077d565b3361108f60c0840160a0850161377e565b6001600160a01b0316146110eb5760405162461bcd60e51b815260206004820152602f6024820152600080516020613c5f83398151915260448201526e1024a72b20a624a22fa9a2a72222a960891b606482015260840161077d565b6110f582806137d3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051637b7acf8960e01b8152737DD23108bba2f97a23f875676153583b9e8455a193637b7acf89935061115f925090600401612f41565b60206040518083038186803b15801561117757600080fd5b505af415801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190613819565b6112075760405162461bcd60e51b81526020600482015260356024820152600080516020613c5f833981519152604482015274040a6d8eace40ccdee4dac2e840dad2e6dac2e8c6d605b1b606482015260840161077d565b61121182826116e5565b6112665760405162461bcd60e51b81526020600482015260326024820152600080516020613c5f83398151915260448201527120494e56414c49445f5349474e415455524560701b606482015260840161077d565b6080820135600090815261013660205260409020805460ff191660011790556112e161129283806137d3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112d7925050506040850160208601613836565b8460400135611f2a565b6060820135156112f4576112f43461211c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b42c0019336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561136c57600080fd5b505af1158015611380573d6000803e3d6000fd5b505050505050565b61013260205260009081526040902080546107cd9061358a565b60808201356000908152610136602052604090205460ff16156113fa5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015260640161077d565b348260600135111561141e5760405162461bcd60e51b815260040161077d90613799565b61142882826115ee565b6114685760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015260640161077d565b3361147960c0840160a0850161377e565b6001600160a01b03161461149f5760405162461bcd60e51b815260040161077d90613851565b6080820135600090815261013660205260409020805460ff191660011790556001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ec7d1fc96114f43390565b61157d611504602087018761388c565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050883591506115469050604089018961388c565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061214692505050565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156115c357600080fd5b505af11580156115d7573d6000803e3d6000fd5b50505050606082013515610cbc57610cbc3461211c565b600080610fb783610fb17fab248fd20764e7aaff2889234a247b3c201544ee877b210e3fdd000110ac7064873561162860208a018a61388c565b6040516020016116399291906138d5565b6040516020818303038152906040528051906020012089806040019061165f919061388c565b604051602001611670929190613915565b60408051601f19818403018152919052805160209091012060608b013560808c01356116a260c08e0160a08f0161377e565b6040805160208101989098528701959095526060860193909352608085019190915260a084015260c08301526001600160a01b031660e082015261010001610f96565b600080610fb783610fb17f1ed09372479709e7a08822316dde431383695c5c4a5eb52af91f81af59bce5bc61171a88806137d3565b604051611728929190613941565b60405180910390208860200160208101906117439190613836565b60408a013560608b013560808c013561176260c08e0160a08f0161377e565b6040805160208101989098528701959095526001600160601b039093166060860152608085019190915260a084015260c08301526001600160a01b031660e082015261010001610f96565b6001600160a01b0385163314806117c957506117c985336105f2565b6117e55760405162461bcd60e51b815260040161077d906136fe565b610a97858585858561235e565b6040808301356000908152610136602052205460ff16156118485760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015260640161077d565b6118528282610f1e565b6118925760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015260640161077d565b336118a3608084016060850161377e565b6001600160a01b0316146118c95760405162461bcd60e51b815260040161077d90613851565b60408083013560009081526101366020908152919020805460ff19166001179055610cbc9083359084013561249a565b60006001600160e01b03198216636cdb3d1360e11b148061192a57506001600160e01b031982166303a24d0760e21b145b806107b957506107b9826124fd565b815183511461199b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161077d565b6001600160a01b0384166119c15760405162461bcd60e51b815260040161077d90613951565b336119d0818787878787612532565b60005b8451811015611ab95760008582815181106119f0576119f061374d565b602002602001015190506000858381518110611a0e57611a0e61374d565b60209081029190910181015160008481526097835260408082206001600160a01b038e168352909352919091205490915081811015611a5f5760405162461bcd60e51b815260040161077d90613996565b60008381526097602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a9e9084906139e0565b9250508190555050505080611ab290613763565b90506119d3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b099291906139f8565b60405180910390a4611380818787878787612540565b6127106001600160601b0382161115611b8d5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b606482015260840161077d565b6001600160a01b038216611be35760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d65746572730000000000604482015260640161077d565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752606690529190942093519051909116600160a01b029116179055565b6001600160a01b038416611c8d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161077d565b336000611c99856126ab565b90506000611ca6856126ab565b9050611cb783600089858589612532565b60008681526097602090815260408083206001600160a01b038b16845290915281208054879290611ce99084906139e0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611d49836000898989896126f6565b50505050505050565b600054610100900460ff16611d795760405162461bcd60e51b815260040161077d90613a26565b611d82816127c0565b50565b600054610100900460ff16611dac5760405162461bcd60e51b815260040161077d90613a26565b565b600054610100900460ff16611dd55760405162461bcd60e51b815260040161077d90613a26565b610cbc82826127f0565b816001600160a01b0316836001600160a01b03161415611e535760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161077d565b6001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006107b9611ecd612831565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611f1d85856128b1565b91509150610bbf816128f4565b6000835111611f6b5760405162461bcd60e51b815260206004820152600d60248201526c115b5c1d1e48199a5b19481a59609a1b604482015260640161077d565b61013383604051611f7c9190613a71565b908152602001604051809103902054600014611fd05760405162461bcd60e51b8152602060048201526013602482015272151bdad95b88185b1c9958591e48195e1a5cdd606a1b604482015260640161077d565b61013154611fdf9060016139e0565b610131819055600081815261013260209081526040909120855161200592870190612dd0565b5080610133856040516120189190613a71565b90815260405190819003602001902055612032818361249a565b610135546001600160a01b03161561205d576101355461205d9082906001600160a01b031685611b1f565b6040805182815260006020820181905291829133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a47fc7d11be9c4384ac178d634a91542b3ed169277be11267808e5b86abd9fc3331281856040516120ce929190613a8d565b60405180910390a1807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6121018361084e565b60405161210e9190612f41565b60405180910390a250505050565b611d827f000000000000000000000000000000000000000000000000000000000000000082612aaf565b600061215183610bc7565b6121945760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604482015260640161077d565b81518451146121de5760405162461bcd60e51b8152602060048201526016602482015275088d2cccccae4cadce840c2e4e4c2f240d8cadccee8d60531b604482015260640161077d565b60008381526101346020526040902054156122c2576000805b8351811015612237578381815181106122125761221261374d565b60200260200101518261222591906139e0565b915061223081613763565b90506121f7565b506000848152610134602090815260408083205460c99092529091205461225f9083906139e0565b11156122c05760405162461bcd60e51b815260206004820152602a60248201527f43616e2774206d696e74206d6f726520746f6b656e732e204d61782073757070604482015269363c9032bc31b2b2b21760b11b606482015260840161077d565b505b6000805b85518110156123555761231c8682815181106122e4576122e461374d565b6020026020010151868684815181106122ff576122ff61374d565b602002602001015160405180602001604052806000815250611c2d565b83818151811061232e5761232e61374d565b60200260200101518261234191906139e0565b91508061234d81613763565b9150506122c6565b50949350505050565b6001600160a01b0384166123845760405162461bcd60e51b815260040161077d90613951565b336000612390856126ab565b9050600061239d856126ab565b90506123ad838989858589612532565b60008681526097602090815260408083206001600160a01b038c168452909152902054858110156123f05760405162461bcd60e51b815260040161077d90613996565b60008781526097602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061242f9084906139e0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461248f848a8a8a8a8a6126f6565b505050505050505050565b60008281526101346020908152604091829020548251858152918201529081018290527f7ae3231d7dddaade1dda48d7b7813183e283184fe5521d66f8704feef3521ec69060600160405180910390a16000918252610134602052604090912055565b60006001600160e01b0319821663152a902d60e11b14806107b957506301ffc9a760e01b6001600160e01b03198316146107b9565b611380868686868686612b57565b6001600160a01b0384163b156113805760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906125849089908990889088908890600401613aa6565b602060405180830381600087803b15801561259e57600080fd5b505af19250505080156125ce575060408051601f3d908101601f191682019092526125cb91810190613b04565b60015b61267b576125da613b21565b806308c379a0141561261457506125ef613b3d565b806125fa5750612616565b8060405162461bcd60e51b815260040161077d9190612f41565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161077d565b6001600160e01b0319811663bc197c8160e01b14611d495760405162461bcd60e51b815260040161077d90613bbb565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106126e5576126e561374d565b602090810291909101015292915050565b6001600160a01b0384163b156113805760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061273a9089908990889088908890600401613c03565b602060405180830381600087803b15801561275457600080fd5b505af1925050508015612784575060408051601f3d908101601f1916820190925261278191810190613b04565b60015b612790576125da613b21565b6001600160e01b0319811663f23a6e6160e01b14611d495760405162461bcd60e51b815260040161077d90613bbb565b600054610100900460ff166127e75760405162461bcd60e51b815260040161077d90613a26565b611d8281612cd0565b600054610100900460ff166128175760405162461bcd60e51b815260040161077d90613a26565b81516020928301208151919092012060fb9190915560fc55565b60006128ac7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61286060fb5490565b60fc546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b6000808251604114156128e85760208301516040840151606085015160001a6128dc87828585612ce3565b94509450505050610a4b565b50600090506002610a4b565b600081600481111561290857612908613c48565b14156129115750565b600181600481111561292557612925613c48565b14156129735760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161077d565b600281600481111561298757612987613c48565b14156129d55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161077d565b60038160048111156129e9576129e9613c48565b1415612a425760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161077d565b6004816004811115612a5657612a56613c48565b1415611d825760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161077d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612afc576040519150601f19603f3d011682016040523d82523d6000602084013e612b01565b606091505b5050905080612b525760405162461bcd60e51b815260206004820181905260248201527f50616964416374696f6e733a20666565207472616e73666572206661696c6564604482015260640161077d565b505050565b6001600160a01b038516612bde5760005b8351811015612bdc57828181518110612b8357612b8361374d565b602002602001015160c96000868481518110612ba157612ba161374d565b602002602001015181526020019081526020016000206000828254612bc691906139e0565b90915550612bd5905081613763565b9050612b68565b505b6001600160a01b0384166113805760005b8351811015611d49576000848281518110612c0c57612c0c61374d565b602002602001015190506000848381518110612c2a57612c2a61374d565b60200260200101519050600060c9600084815260200190815260200160002054905081811015612cad5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b606482015260840161077d565b600092835260c9602052604090922091039055612cc981613763565b9050612bef565b8051610cbc906099906020840190612dd0565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612d1a5750600090506003612dc7565b8460ff16601b14158015612d3257508460ff16601c14155b15612d435750600090506004612dc7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612d97573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612dc057600060019250925050612dc7565b9150600090505b94509492505050565b828054612ddc9061358a565b90600052602060002090601f016020900481019282612dfe5760008555612e44565b82601f10612e1757805160ff1916838001178555612e44565b82800160010185558215612e44579182015b82811115612e44578251825591602001919060010190612e29565b50612e50929150612e54565b5090565b5b80821115612e505760008155600101612e55565b80356001600160a01b0381168114612e8057600080fd5b919050565b60008060408385031215612e9857600080fd5b612ea183612e69565b946020939093013593505050565b6001600160e01b031981168114611d8257600080fd5b600060208284031215612ed757600080fd5b8135612ee281612eaf565b9392505050565b60005b83811015612f04578181015183820152602001612eec565b83811115610d405750506000910152565b60008151808452612f2d816020860160208601612ee9565b601f01601f19169290920160200192915050565b602081526000612ee26020830184612f15565b600060208284031215612f6657600080fd5b5035919050565b60008060408385031215612f8057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612fca57612fca612f8f565b6040525050565b60006001600160401b03821115612fea57612fea612f8f565b5060051b60200190565b600082601f83011261300557600080fd5b8135602061301282612fd1565b60405161301f8282612fa5565b83815260059390931b850182019282810191508684111561303f57600080fd5b8286015b8481101561305a5780358352918301918301613043565b509695505050505050565b60006001600160401b0382111561307e5761307e612f8f565b50601f01601f191660200190565b600082601f83011261309d57600080fd5b81356130a881613065565b6040516130b58282612fa5565b8281528560208487010111156130ca57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a0868803121561310057600080fd5b61310986612e69565b945061311760208701612e69565b935060408601356001600160401b038082111561313357600080fd5b61313f89838a01612ff4565b9450606088013591508082111561315557600080fd5b61316189838a01612ff4565b9350608088013591508082111561317757600080fd5b506131848882890161308c565b9150509295509295909350565b600080604083850312156131a457600080fd5b82356001600160401b03808211156131bb57600080fd5b818501915085601f8301126131cf57600080fd5b813560206131dc82612fd1565b6040516131e98282612fa5565b83815260059390931b850182019282810191508984111561320957600080fd5b948201945b8386101561322e5761321f86612e69565b8252948201949082019061320e565b9650508601359250508082111561324457600080fd5b5061325185828601612ff4565b9150509250929050565b600081518084526020808501945080840160005b8381101561328b5781518752958201959082019060010161326f565b509495945050505050565b602081526000612ee2602083018461325b565b80356001600160601b0381168114612e8057600080fd5b600080604083850312156132d357600080fd5b823591506132e3602084016132a9565b90509250929050565b6000806000806080858703121561330257600080fd5b61330b85612e69565b9350602085013592506040850135915060608501356001600160401b0381111561333457600080fd5b6133408782880161308c565b91505092959194509250565b60006020828403121561335e57600080fd5b81356001600160401b0381111561337457600080fd5b6133808482850161308c565b949350505050565b60008060006060848603121561339d57600080fd5b6133a684612e69565b925060208401356001600160401b03808211156133c257600080fd5b6133ce8783880161308c565b935060408601359150808211156133e457600080fd5b506133f18682870161308c565b9150509250925092565b8015158114611d8257600080fd5b6000806040838503121561341c57600080fd5b61342583612e69565b91506020830135613435816133fb565b809150509250929050565b60008082840360a081121561345457600080fd5b608081121561346257600080fd5b5082915060808301356001600160401b0381111561347f57600080fd5b6132518582860161308c565b600060c0828403121561349d57600080fd5b50919050565b600080604083850312156134b657600080fd5b82356001600160401b03808211156134cd57600080fd5b6134d98683870161348b565b935060208501359150808211156134ef57600080fd5b506132518582860161308c565b6000806040838503121561350f57600080fd5b61351883612e69565b91506132e360208401612e69565b600080600080600060a0868803121561353e57600080fd5b61354786612e69565b945061355560208701612e69565b9350604086013592506060860135915060808601356001600160401b0381111561357e57600080fd5b6131848882890161308c565b600181811c9082168061359e57607f821691505b6020821081141561349d57634e487b7160e01b600052602260045260246000fd5b6000602082840312156135d157600080fd5b81516001600160401b038111156135e757600080fd5b8201601f810184136135f857600080fd5b805161360381613065565b6040516136108282612fa5565b82815286602084860101111561362557600080fd5b613636836020830160208701612ee9565b9695505050505050565b6768747470733a2f2f60c01b815260008351613663816008850160208801612ee9565b602f60f81b6008918401918201528351613684816009840160208801612ee9565b6917bdb4b23e973539b7b760b11b60099290910191820152601301949350505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156136d7576136d76136a7565b500290565b6000826136f957634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613777576137776136a7565b5060010190565b60006020828403121561379057600080fd5b612ee282612e69565b6020808252602c90820152600080516020613c5f83398151915260408201526b08155b99195c9c1c9a58d95960a21b606082015260800190565b6000808335601e198436030181126137ea57600080fd5b8301803591506001600160401b0382111561380457600080fd5b602001915036819003821315610a4b57600080fd5b60006020828403121561382b57600080fd5b8151612ee2816133fb565b60006020828403121561384857600080fd5b612ee2826132a9565b6020808252602d90820152600080516020613c5f83398151915260408201526c102bb937b7339039b2b73232b960991b606082015260800190565b6000808335601e198436030181126138a357600080fd5b8301803591506001600160401b038211156138bd57600080fd5b6020019150600581901b3603821315610a4b57600080fd5b60008184825b8581101561390a576001600160a01b036138f483612e69565b16835260209283019291909101906001016138db565b509095945050505050565b60006001600160fb1b0383111561392b57600080fd5b8260051b80858437600092019182525092915050565b8183823760009101908152919050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600082198211156139f3576139f36136a7565b500190565b604081526000613a0b604083018561325b565b8281036020840152613a1d818561325b565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613a83818460208701612ee9565b9190910192915050565b8281526040602082015260006133806040830184612f15565b6001600160a01b0386811682528516602082015260a060408201819052600090613ad29083018661325b565b8281036060840152613ae4818661325b565b90508281036080840152613af88185612f15565b98975050505050505050565b600060208284031215613b1657600080fd5b8151612ee281612eaf565b600060033d1115613b3a5760046000803e5060005160e01c5b90565b600060443d1015613b4b5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613b7a57505050505090565b8285019150815181811115613b925750505050505090565b843d8701016020828501011115613bac5750505050505090565b61390a60208286010187612fa5565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613c3d90830184612f15565b979650505050505050565b634e487b7160e01b600052602160045260246000fdfe46696c65416363657373436f6c6c656374696f6e5570677261646561626c653aa2646970667358221220c2e848aabf8f0175007eda5b2cc8a42b40a4b7238faf363f39990a8787d6c3c264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101ed5760003560e01c8063906571471161010d578063e09314ad116100a0578063f242432a1161006f578063f242432a14610640578063f9aebda014610660578063fa996fae14610691578063fdbd98b0146106b1578063ffa1ad74146106e557600080fd5b8063e09314ad14610586578063e52cb36a146105a6578063e985e9c5146105d7578063ef0eb3871461062057600080fd5b8063b452da84116100dc578063b452da8414610513578063bd85b03914610526578063c83e13b814610553578063cb519d8c1461057357600080fd5b806390657147146104925780639fbc8713146104b2578063a22cb465146104d3578063ae82236c146104f357600080fd5b80634e1273f411610185578063731133e911610154578063731133e9146103f45780637a6cd9cb14610414578063869f75941461044d5780638c0e83491461047b57600080fd5b80634e1273f4146103725780634f558e791461039f5780635bddceab146103bf5780637284e416146103df57600080fd5b806312fde4b7116101c157806312fde4b7146102975780632a55205a146102de5780632eb2c2d61461031d5780634ce748591461033f57600080fd5b8062fdd58e146101f257806301ffc9a71461022557806306fdde03146102555780630e89341c14610277575b600080fd5b3480156101fe57600080fd5b5061021261020d366004612e85565b610716565b6040519081526020015b60405180910390f35b34801561023157600080fd5b50610245610240366004612ec5565b6107ae565b604051901515815260200161021c565b34801561026157600080fd5b5061026a6107bf565b60405161021c9190612f41565b34801561028357600080fd5b5061026a610292366004612f54565b61084e565b3480156102a357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161021c565b3480156102ea57600080fd5b506102fe6102f9366004612f6d565b6109a4565b604080516001600160a01b03909316835260208301919091520161021c565b34801561032957600080fd5b5061033d6103383660046130e8565b610a52565b005b34801561034b57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102c6565b34801561037e57600080fd5b5061039261038d366004613191565b610a9e565b60405161021c9190613296565b3480156103ab57600080fd5b506102456103ba366004612f54565b610bc7565b3480156103cb57600080fd5b5061033d6103da3660046132c0565b610bee565b3480156103eb57600080fd5b5061026a610cc0565b34801561040057600080fd5b5061033d61040f3660046132ec565b610cce565b34801561042057600080fd5b5061021261042f36600461334c565b80516020818301810180516101338252928201919093012091525481565b34801561045957600080fd5b50610212610468366004612f54565b6000908152610134602052604090205490565b34801561048757600080fd5b506102126101315481565b34801561049e57600080fd5b5061033d6104ad366004613388565b610d46565b3480156104be57600080fd5b50610135546102c6906001600160a01b031681565b3480156104df57600080fd5b5061033d6104ee366004613409565b610f13565b3480156104ff57600080fd5b5061024561050e366004613440565b610f1e565b61033d6105213660046134a3565b610fed565b34801561053257600080fd5b50610212610541366004612f54565b600090815260c9602052604090205490565b34801561055f57600080fd5b5061026a61056e366004612f54565b611388565b61033d6105813660046134a3565b6113a2565b34801561059257600080fd5b506102456105a13660046134a3565b6115ee565b3480156105b257600080fd5b506102456105c1366004612f54565b6000908152610136602052604090205460ff1690565b3480156105e357600080fd5b506102456105f23660046134fc565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205460ff1690565b34801561062c57600080fd5b5061024561063b3660046134a3565b6116e5565b34801561064c57600080fd5b5061033d61065b366004613526565b6117ad565b34801561066c57600080fd5b5061024561067b366004612f54565b6101366020526000908152604090205460ff1681565b34801561069d57600080fd5b5061033d6106ac366004613440565b6117f2565b3480156106bd57600080fd5b506102c67f000000000000000000000000000000000000000000000000000000000000000081565b3480156106f157600080fd5b5061026a60405180604001604052806005815260200164181718171960d91b81525081565b60006001600160a01b0383166107865760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526097602090815260408083206001600160a01b03949094168352929052205490565b60006107b9826118f9565b92915050565b61012f80546107cd9061358a565b80601f01602080910402602001604051908101604052809291908181526020018280546107f99061358a565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505081565b604051631623433d60e31b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260609073__$51669e1cb9fcb524e61b1b12a5e865aabb$__9063b11a19e89060240160006040518083038186803b1580156108bb57600080fd5b505af41580156108cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108f791908101906135bf565b604051632b65311f60e11b815230600482015273__$51669e1cb9fcb524e61b1b12a5e865aabb$__906356ca623e9060240160006040518083038186803b15801561094157600080fd5b505af4158015610955573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097d91908101906135bf565b60405160200161098e929190613640565b6040516020818303038152906040529050919050565b60008281526066602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610a195750604080518082019091526065546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610a38906001600160601b0316876136bd565b610a4291906136dc565b91519350909150505b9250929050565b6001600160a01b038516331480610a6e5750610a6e85336105f2565b610a8a5760405162461bcd60e51b815260040161077d906136fe565b610a978585858585611939565b5050505050565b60608151835114610b035760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161077d565b600083516001600160401b03811115610b1e57610b1e612f8f565b604051908082528060200260200182016040528015610b47578160200160208202803683370190505b50905060005b8451811015610bbf57610b92858281518110610b6b57610b6b61374d565b6020026020010151858381518110610b8557610b8561374d565b6020026020010151610716565b828281518110610ba457610ba461374d565b6020908102919091010152610bb881613763565b9050610b4d565b509392505050565b6000818152610132602052604081208054829190610be49061358a565b9050119050919050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c545760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015260640161077d565b612710816001600160601b031610610ca35760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642070657263656e7461676560701b604482015260640161077d565b61013554610cbc9083906001600160a01b031683611b1f565b5050565b61013080546107cd9061358a565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d345760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015260640161077d565b610d4084848484611c2d565b50505050565b600054610100900460ff1615808015610d665750600054600160ff909116105b80610d805750303b158015610d80575060005460ff166001145b610de35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161077d565b6000805460ff191660011790558015610e06576000805461ff0019166101001790555b8251610e1a9061012f906020860190612dd0565b508151610e2f90610130906020850190612dd0565b5061013580546001600160a01b0319166001600160a01b038616179055604080516020810190915260008152610e6490611d52565b610e6c611d85565b610ec86040518060400160405280601f81526020017f46696c65416363657373436f6c6c656374696f6e5570677261646561626c650081525060405180604001604052806005815260200164181718171960d91b815250611dae565b8015610d40576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b610cbc338383611ddf565b600080610fb783610fb17f5f21b314e803189587a545fde5241e6c72dc57e54abeff586b4d60457cc439728735602089013560408a0135610f6560808c0160608d0161377e565b604080516020810196909652850193909352606084019190915260808301526001600160a01b031660a082015260c0015b60405160208183030381529060405280519060200120611ec0565b90611f0e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911614949350505050565b34826060013511156110115760405162461bcd60e51b815260040161077d90613799565b60808201356000908152610136602052604090205460ff161561107e5760405162461bcd60e51b81526020600482015260316024820152600080516020613c5f83398151915260448201527008105b1c9958591e48195e1958dd5d1959607a1b606482015260840161077d565b3361108f60c0840160a0850161377e565b6001600160a01b0316146110eb5760405162461bcd60e51b815260206004820152602f6024820152600080516020613c5f83398151915260448201526e1024a72b20a624a22fa9a2a72222a960891b606482015260840161077d565b6110f582806137d3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051637b7acf8960e01b815273__$2bb727cc0ef0ded9e2da0b5e05e5e30641$__93637b7acf89935061115f925090600401612f41565b60206040518083038186803b15801561117757600080fd5b505af415801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190613819565b6112075760405162461bcd60e51b81526020600482015260356024820152600080516020613c5f833981519152604482015274040a6d8eace40ccdee4dac2e840dad2e6dac2e8c6d605b1b606482015260840161077d565b61121182826116e5565b6112665760405162461bcd60e51b81526020600482015260326024820152600080516020613c5f83398151915260448201527120494e56414c49445f5349474e415455524560701b606482015260840161077d565b6080820135600090815261013660205260409020805460ff191660011790556112e161129283806137d3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112d7925050506040850160208601613836565b8460400135611f2a565b6060820135156112f4576112f43461211c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b42c0019336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561136c57600080fd5b505af1158015611380573d6000803e3d6000fd5b505050505050565b61013260205260009081526040902080546107cd9061358a565b60808201356000908152610136602052604090205460ff16156113fa5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015260640161077d565b348260600135111561141e5760405162461bcd60e51b815260040161077d90613799565b61142882826115ee565b6114685760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015260640161077d565b3361147960c0840160a0850161377e565b6001600160a01b03161461149f5760405162461bcd60e51b815260040161077d90613851565b6080820135600090815261013660205260409020805460ff191660011790556001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ec7d1fc96114f43390565b61157d611504602087018761388c565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050883591506115469050604089018961388c565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061214692505050565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156115c357600080fd5b505af11580156115d7573d6000803e3d6000fd5b50505050606082013515610cbc57610cbc3461211c565b600080610fb783610fb17fab248fd20764e7aaff2889234a247b3c201544ee877b210e3fdd000110ac7064873561162860208a018a61388c565b6040516020016116399291906138d5565b6040516020818303038152906040528051906020012089806040019061165f919061388c565b604051602001611670929190613915565b60408051601f19818403018152919052805160209091012060608b013560808c01356116a260c08e0160a08f0161377e565b6040805160208101989098528701959095526060860193909352608085019190915260a084015260c08301526001600160a01b031660e082015261010001610f96565b600080610fb783610fb17f1ed09372479709e7a08822316dde431383695c5c4a5eb52af91f81af59bce5bc61171a88806137d3565b604051611728929190613941565b60405180910390208860200160208101906117439190613836565b60408a013560608b013560808c013561176260c08e0160a08f0161377e565b6040805160208101989098528701959095526001600160601b039093166060860152608085019190915260a084015260c08301526001600160a01b031660e082015261010001610f96565b6001600160a01b0385163314806117c957506117c985336105f2565b6117e55760405162461bcd60e51b815260040161077d906136fe565b610a97858585858561235e565b6040808301356000908152610136602052205460ff16156118485760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015260640161077d565b6118528282610f1e565b6118925760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015260640161077d565b336118a3608084016060850161377e565b6001600160a01b0316146118c95760405162461bcd60e51b815260040161077d90613851565b60408083013560009081526101366020908152919020805460ff19166001179055610cbc9083359084013561249a565b60006001600160e01b03198216636cdb3d1360e11b148061192a57506001600160e01b031982166303a24d0760e21b145b806107b957506107b9826124fd565b815183511461199b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161077d565b6001600160a01b0384166119c15760405162461bcd60e51b815260040161077d90613951565b336119d0818787878787612532565b60005b8451811015611ab95760008582815181106119f0576119f061374d565b602002602001015190506000858381518110611a0e57611a0e61374d565b60209081029190910181015160008481526097835260408082206001600160a01b038e168352909352919091205490915081811015611a5f5760405162461bcd60e51b815260040161077d90613996565b60008381526097602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a9e9084906139e0565b9250508190555050505080611ab290613763565b90506119d3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b099291906139f8565b60405180910390a4611380818787878787612540565b6127106001600160601b0382161115611b8d5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b606482015260840161077d565b6001600160a01b038216611be35760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d65746572730000000000604482015260640161077d565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752606690529190942093519051909116600160a01b029116179055565b6001600160a01b038416611c8d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161077d565b336000611c99856126ab565b90506000611ca6856126ab565b9050611cb783600089858589612532565b60008681526097602090815260408083206001600160a01b038b16845290915281208054879290611ce99084906139e0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611d49836000898989896126f6565b50505050505050565b600054610100900460ff16611d795760405162461bcd60e51b815260040161077d90613a26565b611d82816127c0565b50565b600054610100900460ff16611dac5760405162461bcd60e51b815260040161077d90613a26565b565b600054610100900460ff16611dd55760405162461bcd60e51b815260040161077d90613a26565b610cbc82826127f0565b816001600160a01b0316836001600160a01b03161415611e535760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161077d565b6001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006107b9611ecd612831565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611f1d85856128b1565b91509150610bbf816128f4565b6000835111611f6b5760405162461bcd60e51b815260206004820152600d60248201526c115b5c1d1e48199a5b19481a59609a1b604482015260640161077d565b61013383604051611f7c9190613a71565b908152602001604051809103902054600014611fd05760405162461bcd60e51b8152602060048201526013602482015272151bdad95b88185b1c9958591e48195e1a5cdd606a1b604482015260640161077d565b61013154611fdf9060016139e0565b610131819055600081815261013260209081526040909120855161200592870190612dd0565b5080610133856040516120189190613a71565b90815260405190819003602001902055612032818361249a565b610135546001600160a01b03161561205d576101355461205d9082906001600160a01b031685611b1f565b6040805182815260006020820181905291829133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a47fc7d11be9c4384ac178d634a91542b3ed169277be11267808e5b86abd9fc3331281856040516120ce929190613a8d565b60405180910390a1807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6121018361084e565b60405161210e9190612f41565b60405180910390a250505050565b611d827f000000000000000000000000000000000000000000000000000000000000000082612aaf565b600061215183610bc7565b6121945760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604482015260640161077d565b81518451146121de5760405162461bcd60e51b8152602060048201526016602482015275088d2cccccae4cadce840c2e4e4c2f240d8cadccee8d60531b604482015260640161077d565b60008381526101346020526040902054156122c2576000805b8351811015612237578381815181106122125761221261374d565b60200260200101518261222591906139e0565b915061223081613763565b90506121f7565b506000848152610134602090815260408083205460c99092529091205461225f9083906139e0565b11156122c05760405162461bcd60e51b815260206004820152602a60248201527f43616e2774206d696e74206d6f726520746f6b656e732e204d61782073757070604482015269363c9032bc31b2b2b21760b11b606482015260840161077d565b505b6000805b85518110156123555761231c8682815181106122e4576122e461374d565b6020026020010151868684815181106122ff576122ff61374d565b602002602001015160405180602001604052806000815250611c2d565b83818151811061232e5761232e61374d565b60200260200101518261234191906139e0565b91508061234d81613763565b9150506122c6565b50949350505050565b6001600160a01b0384166123845760405162461bcd60e51b815260040161077d90613951565b336000612390856126ab565b9050600061239d856126ab565b90506123ad838989858589612532565b60008681526097602090815260408083206001600160a01b038c168452909152902054858110156123f05760405162461bcd60e51b815260040161077d90613996565b60008781526097602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061242f9084906139e0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461248f848a8a8a8a8a6126f6565b505050505050505050565b60008281526101346020908152604091829020548251858152918201529081018290527f7ae3231d7dddaade1dda48d7b7813183e283184fe5521d66f8704feef3521ec69060600160405180910390a16000918252610134602052604090912055565b60006001600160e01b0319821663152a902d60e11b14806107b957506301ffc9a760e01b6001600160e01b03198316146107b9565b611380868686868686612b57565b6001600160a01b0384163b156113805760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906125849089908990889088908890600401613aa6565b602060405180830381600087803b15801561259e57600080fd5b505af19250505080156125ce575060408051601f3d908101601f191682019092526125cb91810190613b04565b60015b61267b576125da613b21565b806308c379a0141561261457506125ef613b3d565b806125fa5750612616565b8060405162461bcd60e51b815260040161077d9190612f41565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161077d565b6001600160e01b0319811663bc197c8160e01b14611d495760405162461bcd60e51b815260040161077d90613bbb565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106126e5576126e561374d565b602090810291909101015292915050565b6001600160a01b0384163b156113805760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061273a9089908990889088908890600401613c03565b602060405180830381600087803b15801561275457600080fd5b505af1925050508015612784575060408051601f3d908101601f1916820190925261278191810190613b04565b60015b612790576125da613b21565b6001600160e01b0319811663f23a6e6160e01b14611d495760405162461bcd60e51b815260040161077d90613bbb565b600054610100900460ff166127e75760405162461bcd60e51b815260040161077d90613a26565b611d8281612cd0565b600054610100900460ff166128175760405162461bcd60e51b815260040161077d90613a26565b81516020928301208151919092012060fb9190915560fc55565b60006128ac7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61286060fb5490565b60fc546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b6000808251604114156128e85760208301516040840151606085015160001a6128dc87828585612ce3565b94509450505050610a4b565b50600090506002610a4b565b600081600481111561290857612908613c48565b14156129115750565b600181600481111561292557612925613c48565b14156129735760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161077d565b600281600481111561298757612987613c48565b14156129d55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161077d565b60038160048111156129e9576129e9613c48565b1415612a425760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161077d565b6004816004811115612a5657612a56613c48565b1415611d825760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161077d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612afc576040519150601f19603f3d011682016040523d82523d6000602084013e612b01565b606091505b5050905080612b525760405162461bcd60e51b815260206004820181905260248201527f50616964416374696f6e733a20666565207472616e73666572206661696c6564604482015260640161077d565b505050565b6001600160a01b038516612bde5760005b8351811015612bdc57828181518110612b8357612b8361374d565b602002602001015160c96000868481518110612ba157612ba161374d565b602002602001015181526020019081526020016000206000828254612bc691906139e0565b90915550612bd5905081613763565b9050612b68565b505b6001600160a01b0384166113805760005b8351811015611d49576000848281518110612c0c57612c0c61374d565b602002602001015190506000848381518110612c2a57612c2a61374d565b60200260200101519050600060c9600084815260200190815260200160002054905081811015612cad5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b606482015260840161077d565b600092835260c9602052604090922091039055612cc981613763565b9050612bef565b8051610cbc906099906020840190612dd0565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612d1a5750600090506003612dc7565b8460ff16601b14158015612d3257508460ff16601c14155b15612d435750600090506004612dc7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612d97573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612dc057600060019250925050612dc7565b9150600090505b94509492505050565b828054612ddc9061358a565b90600052602060002090601f016020900481019282612dfe5760008555612e44565b82601f10612e1757805160ff1916838001178555612e44565b82800160010185558215612e44579182015b82811115612e44578251825591602001919060010190612e29565b50612e50929150612e54565b5090565b5b80821115612e505760008155600101612e55565b80356001600160a01b0381168114612e8057600080fd5b919050565b60008060408385031215612e9857600080fd5b612ea183612e69565b946020939093013593505050565b6001600160e01b031981168114611d8257600080fd5b600060208284031215612ed757600080fd5b8135612ee281612eaf565b9392505050565b60005b83811015612f04578181015183820152602001612eec565b83811115610d405750506000910152565b60008151808452612f2d816020860160208601612ee9565b601f01601f19169290920160200192915050565b602081526000612ee26020830184612f15565b600060208284031215612f6657600080fd5b5035919050565b60008060408385031215612f8057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612fca57612fca612f8f565b6040525050565b60006001600160401b03821115612fea57612fea612f8f565b5060051b60200190565b600082601f83011261300557600080fd5b8135602061301282612fd1565b60405161301f8282612fa5565b83815260059390931b850182019282810191508684111561303f57600080fd5b8286015b8481101561305a5780358352918301918301613043565b509695505050505050565b60006001600160401b0382111561307e5761307e612f8f565b50601f01601f191660200190565b600082601f83011261309d57600080fd5b81356130a881613065565b6040516130b58282612fa5565b8281528560208487010111156130ca57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a0868803121561310057600080fd5b61310986612e69565b945061311760208701612e69565b935060408601356001600160401b038082111561313357600080fd5b61313f89838a01612ff4565b9450606088013591508082111561315557600080fd5b61316189838a01612ff4565b9350608088013591508082111561317757600080fd5b506131848882890161308c565b9150509295509295909350565b600080604083850312156131a457600080fd5b82356001600160401b03808211156131bb57600080fd5b818501915085601f8301126131cf57600080fd5b813560206131dc82612fd1565b6040516131e98282612fa5565b83815260059390931b850182019282810191508984111561320957600080fd5b948201945b8386101561322e5761321f86612e69565b8252948201949082019061320e565b9650508601359250508082111561324457600080fd5b5061325185828601612ff4565b9150509250929050565b600081518084526020808501945080840160005b8381101561328b5781518752958201959082019060010161326f565b509495945050505050565b602081526000612ee2602083018461325b565b80356001600160601b0381168114612e8057600080fd5b600080604083850312156132d357600080fd5b823591506132e3602084016132a9565b90509250929050565b6000806000806080858703121561330257600080fd5b61330b85612e69565b9350602085013592506040850135915060608501356001600160401b0381111561333457600080fd5b6133408782880161308c565b91505092959194509250565b60006020828403121561335e57600080fd5b81356001600160401b0381111561337457600080fd5b6133808482850161308c565b949350505050565b60008060006060848603121561339d57600080fd5b6133a684612e69565b925060208401356001600160401b03808211156133c257600080fd5b6133ce8783880161308c565b935060408601359150808211156133e457600080fd5b506133f18682870161308c565b9150509250925092565b8015158114611d8257600080fd5b6000806040838503121561341c57600080fd5b61342583612e69565b91506020830135613435816133fb565b809150509250929050565b60008082840360a081121561345457600080fd5b608081121561346257600080fd5b5082915060808301356001600160401b0381111561347f57600080fd5b6132518582860161308c565b600060c0828403121561349d57600080fd5b50919050565b600080604083850312156134b657600080fd5b82356001600160401b03808211156134cd57600080fd5b6134d98683870161348b565b935060208501359150808211156134ef57600080fd5b506132518582860161308c565b6000806040838503121561350f57600080fd5b61351883612e69565b91506132e360208401612e69565b600080600080600060a0868803121561353e57600080fd5b61354786612e69565b945061355560208701612e69565b9350604086013592506060860135915060808601356001600160401b0381111561357e57600080fd5b6131848882890161308c565b600181811c9082168061359e57607f821691505b6020821081141561349d57634e487b7160e01b600052602260045260246000fd5b6000602082840312156135d157600080fd5b81516001600160401b038111156135e757600080fd5b8201601f810184136135f857600080fd5b805161360381613065565b6040516136108282612fa5565b82815286602084860101111561362557600080fd5b613636836020830160208701612ee9565b9695505050505050565b6768747470733a2f2f60c01b815260008351613663816008850160208801612ee9565b602f60f81b6008918401918201528351613684816009840160208801612ee9565b6917bdb4b23e973539b7b760b11b60099290910191820152601301949350505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156136d7576136d76136a7565b500290565b6000826136f957634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613777576137776136a7565b5060010190565b60006020828403121561379057600080fd5b612ee282612e69565b6020808252602c90820152600080516020613c5f83398151915260408201526b08155b99195c9c1c9a58d95960a21b606082015260800190565b6000808335601e198436030181126137ea57600080fd5b8301803591506001600160401b0382111561380457600080fd5b602001915036819003821315610a4b57600080fd5b60006020828403121561382b57600080fd5b8151612ee2816133fb565b60006020828403121561384857600080fd5b612ee2826132a9565b6020808252602d90820152600080516020613c5f83398151915260408201526c102bb937b7339039b2b73232b960991b606082015260800190565b6000808335601e198436030181126138a357600080fd5b8301803591506001600160401b038211156138bd57600080fd5b6020019150600581901b3603821315610a4b57600080fd5b60008184825b8581101561390a576001600160a01b036138f483612e69565b16835260209283019291909101906001016138db565b509095945050505050565b60006001600160fb1b0383111561392b57600080fd5b8260051b80858437600092019182525092915050565b8183823760009101908152919050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600082198211156139f3576139f36136a7565b500190565b604081526000613a0b604083018561325b565b8281036020840152613a1d818561325b565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613a83818460208701612ee9565b9190910192915050565b8281526040602082015260006133806040830184612f15565b6001600160a01b0386811682528516602082015260a060408201819052600090613ad29083018661325b565b8281036060840152613ae4818661325b565b90508281036080840152613af88185612f15565b98975050505050505050565b600060208284031215613b1657600080fd5b8151612ee281612eaf565b600060033d1115613b3a5760046000803e5060005160e01c5b90565b600060443d1015613b4b5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613b7a57505050505090565b8285019150815181811115613b925750505050505090565b843d8701016020828501011115613bac5750505050505090565b61390a60208286010187612fa5565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613c3d90830184612f15565b979650505050505050565b634e487b7160e01b600052602160045260246000fdfe46696c65416363657373436f6c6c656374696f6e5570677261646561626c653aa2646970667358221220c2e848aabf8f0175007eda5b2cc8a42b40a4b7238faf363f39990a8787d6c3c264736f6c63430008090033",
  "libraries": {
    "az09Dash": "0x7DD23108bba2f97a23f875676153583b9e8455a1",
    "ToString": "0x938945Cc5e4aE22F483931a17A55c1F56a26948f",
    "ECDSAUpgradeable": "0x39Dc06B0d8d2925794f764B0E84Ac4e38De2C9a1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 585,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 588,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2831,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3639,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2361,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(RoyaltyInfo)2358_storage"
      },
      {
        "astId": 2366,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)2358_storage)"
      },
      {
        "astId": 2546,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 758,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 764,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 766,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_uri",
        "offset": 0,
        "slot": "153",
        "type": "t_string_storage"
      },
      {
        "astId": 1973,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 2162,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2313,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3455,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "251",
        "type": "t_bytes32"
      },
      {
        "astId": 3457,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "252",
        "type": "t_bytes32"
      },
      {
        "astId": 3595,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5795,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "name",
        "offset": 0,
        "slot": "303",
        "type": "t_string_storage"
      },
      {
        "astId": 5797,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "description",
        "offset": 0,
        "slot": "304",
        "type": "t_string_storage"
      },
      {
        "astId": 5799,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "latestTokenId",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 5803,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "tokenToFile",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5807,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "fileToToken",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5811,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "_maxSupply",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5813,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "309",
        "type": "t_address"
      },
      {
        "astId": 5817,
        "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
        "label": "executedMap",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)2358_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)2358_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)2358_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 2355,
            "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2357,
            "contract": "contracts/TokenizedFiles/FileAccessCollectionUpgradeable.sol:FileAccessCollectionUpgradeable",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}